{
    "timestamp": "2025-08-02-14-16-33",
    "user_prompt": "Please summarise the following document.  The intendid audience is a manager for a technical group of staff - but they themselves are not deeply technical.  Please don't add any preamble or further chat - the summary is the only thing required.\n\n<document>\n\nHow Anthropic teams use Claude Code\n\nAgentic coding tools like Claude Code help developers accelerate workflows, automate repetitive tasks, and tackle complex programming projects. As the field evolves, we're learning about new applications everyday from users, including our own employees.\n\nTo learn more, we sat down with employees across Anthropic to understand how they use Claude Code at work.\n\nWhile many of their use cases were predictable\u2014debugging, navigating codebases, managing workflows\u2014others surprised us. Lawyers built phone tree systems. Marketers generated hundreds of ad variations in seconds. Data scientists created complex visualizations without knowing JavaScript.\n\nThe pattern became clear: agentic coding isn't just accelerating traditional development. It's dissolving the boundary between technical and non-technical work, turning anyone who can describe a problem into someone who can build a solution.\n\nHere\u2019s what we learned.\n\nCodebase navigation and understanding\n\nTeams across the company use Claude Code to help new hires and even long-time employees get up to speed on our codebases.\n\nNew data scientists on our Infrastructure team feed Claude Code their entire codebase to get productive quickly. Claude reads the codebase\u2019s CLAUDE.md files, identifies relevant ones, explains data pipeline dependencies, and shows which upstream sources feed into dashboards, replacing traditional data catalog tools.\n\nOur Product Engineering team refers to Claude Code as their \"first stop\" for any programming task. They ask it to identify which files to examine for bug fixes, features, or analysis, eliminating the time-consuming process of manually gathering context before building new features.\n\nTesting and code review\n\nAgentic coding tools are particularly popular for their ability to automate two critical but tedious programming tasks: writing unit tests and reviewing code.\n\nThe Product Design team uses Claude Code to write comprehensive tests for new features. They've automated Pull Request comments through GitHub Actions, with Claude handling formatting issues and test case refactoring automatically.\n\nThe Security Engineering team transformed their workflow from \"design doc \u2192 janky code \u2192 refactor \u2192 give up on tests\" to asking Claude for pseudocode, guiding it through test-driven development, and checking in periodically. This results in more reliable, testable code.\n\nAgentic coding can also be used to translate tests into other programming languages. For instance, when the Inference team needs to test functionality in unfamiliar languages like Rust, they explain what they want to test and Claude writes the logic in the native language of the codebase.\n\nDebugging and troubleshooting\n\nProduction issues demand quick resolution, but trying to reason about unfamiliar code under pressure often leads to delays. For many teams at the company, Claude Code accelerates diagnosis and fixes by analyzing stack traces, documentation, and system behavior in real-time.\n\nDuring incidents, the Security Engineering team feeds Claude Code stack traces and documentation to trace control flow through the codebase. Problems that typically take 10-15 minutes of manual scanning now resolve 3x as quickly.\n\nWith Claude Code, the Product Engineering team gained confidence to tackle bugs in unfamiliar codebases. They ask Claude: \"Can you fix this bug? This is the behavior I'm seeing\" and review the proposed solution without needing to rely on other engineering teams for assistance.\n\nIn one instance, when Kubernetes clusters stopped scheduling pods, the Data Infrastructure team used Claude Code to diagnose the issue. They fed it dashboard screenshots, and Claude guided them menu-by-menu through Google Cloud's UI until they found pod IP address exhaustion. Claude then provided the exact commands to create a new IP pool and add it to the cluster, saving them 20 minutes of valuable time during a system outage.\n\nPrototyping and feature development\n\nBuilding new features traditionally requires deep technical knowledge and significant time investment. Claude Code enables rapid prototyping and even full application development, letting teams validate ideas quickly regardless of their programming expertise.\n\nMembers of the Product Design team would feed Figma design files to Claude Code and then set up autonomous loops where Claude Code writes the code for the new feature, runs tests, and iterates continuously. They give Claude abstract problems, let it work autonomously, then review solutions before final refinements. In one case, they had Claude build Vim key bindings for itself with minimal human review.\n\nWith Claude Code, the Product Design team discovered an unexpected use: mapping out error states, logic flows, and system statuses to identify edge cases during design rather than discovering them in development. This fundamentally improves their initial design quality and saves them hours of debugging later on.\n\nDespite not being fluent in TypeScript, data scientists use Claude Code to build entire React applications for visualizing RL model performance. After one-shot prompting in a sandbox environment, the tool writes entire TypeScript visualizations from scratch without understanding the code themselves. Given the simplicity of the task, if the first prompt isn\u2019t sufficient, they\u2019ll make slight tweaks and try again.\n\nDocumentation and knowledge management\n\nTechnical documentation often sits scattered across wikis, code comments, and team members' heads. Claude Code consolidates this knowledge via MCP and CLAUDE.md files into accessible formats, making expertise available to everyone who needs it.\n\nInference team members without ML backgrounds depend on Claude to explain model-specific functions. What normally requires an hour of Google searching now takes 10-20 minutes\u2014an 80% reduction in research time.\n\nThe Security Engineering team has Claude ingest multiple documentation sources to create markdown runbooks and troubleshooting guides. These condensed documents become context for debugging real production issues, which is often more efficient than searching through full knowledge bases.\n\nAutomation and workflow optimization\n\nAgentic coding tools help teams build custom automation that would traditionally require dedicated developer resources or expensive software.\n\nThe Growth Marketing team built an agentic workflow that processes CSV files with hundreds of ads, identifies underperformers, and generates new variations within strict character limits. Using two specialized sub-agents, the system generates hundreds of new ads in minutes instead of hours.\n\nThey also developed a Figma plugin that identifies frames and programmatically generates up to 100 ad variations by swapping headlines and descriptions, reducing hours of copy-pasting to half a second per batch of ads.\n\nIn a particularly unique use case, the Legal team created prototype \"phone tree\" systems to help team members connect with the right lawyer at Anthropic, demonstrating how departments can build custom tools without traditional development resources.\n\nUnlocking new possibilities with Claude Code\n\nThese stories reveal a pattern: Claude Code works best when you focus on the human workflows that it can augment. The most successful teams treat Claude Code as a thought partner rather than a code generator.\n\nThey explore possibilities, prototype rapidly, and share discoveries across technical and non-technical users. This collaborative approach between humans and AI creates opportunities we're only beginning to understand.\n\n</document>\n",
    "system_prompt": null,
    "results": [
        {
            "model": "openai/o4-mini",
            "response": "Codebase Navigation and Onboarding  \n\u2022 Quickly ingests entire codebases (CLAUDE.md, pipelines, dependencies) to brief new hires and existing staff  \n\u2022 Identifies relevant files for bug fixes, features, or analyses, cutting out manual context-gathering  \n\nTesting and Code Review  \n\u2022 Auto-generates unit tests and pull-request comments via GitHub Actions, handling formatting and refactoring  \n\u2022 Supports test-driven workflows (pseudocode \u2192 guided tests) for more reliable code  \n\u2022 Translates or writes tests in unfamiliar languages (e.g., Rust) from high-level descriptions  \n\nDebugging and Troubleshooting  \n\u2022 Analyzes stack traces, documentation, and system behavior in real time to accelerate incident response (3\u00d7 faster fixes)  \n\u2022 Guides through cloud-UI diagnostics and provides exact commands (e.g., resolving Kubernetes IP exhaustion in minutes)  \n\u2022 Empowers engineers to tackle unfamiliar codebases without cross-team dependencies  \n\nPrototyping and Feature Development  \n\u2022 Converts Figma designs or abstract requirements into working features, running tests and iterating autonomously  \n\u2022 Maps error states and logic flows up\u2010front to catch edge cases in design rather than development  \n\u2022 Enables non-experts (data scientists) to build full React/TypeScript visualizations with minimal prompting  \n\nDocumentation and Knowledge Management  \n\u2022 Consolidates scattered docs (wikis, code comments, MCP/CLAUDE.md) into clear runbooks and guides  \n\u2022 Reduces research time by up to 80% for non-specialists needing explanations of domain-specific functions  \n\nAutomation and Workflow Optimization  \n\u2022 Builds end-to-end workflows (e.g., CSV-driven ad analysis and batch-generation) that run in minutes instead of hours  \n\u2022 Creates plugins (like Figma add-ons) to programmatically swap headlines/descriptions and generate hundreds of ad variants instantly  \n\u2022 Enables non-developers (Legal team) to prototype tools (phone trees) without hiring engineers  \n\nKey Insight  \nTreat Claude Code as a thought partner\u2014focus on human workflows it can augment rather than just code generation. Cross-team collaboration and rapid prototyping unlock new efficiencies for both technical and non-technical staff.",
            "cost": 0.0033572,
            "total_time": 6.619193077087402
        },
        {
            "model": "openai/gpt-4.1-mini",
            "response": "Anthropic teams use Claude Code, an AI-powered coding assistant, to enhance productivity across technical and non-technical roles by accelerating workflows, automating repetitive tasks, and simplifying complex programming challenges. Key applications include:\n\n- **Codebase navigation:** Helps new and existing staff quickly understand complex codebases, replacing traditional tools and saving time.\n- **Testing and code review:** Automates writing and reviewing tests, improving code quality and enabling test-driven development even in unfamiliar languages.\n- **Debugging:** Speeds up problem diagnosis during production issues by analyzing errors and guiding fixes, reducing resolution times significantly.\n- **Prototyping and feature development:** Enables rapid creation and iteration of features by translating design inputs into code autonomously, lowering barriers for non-expert programmers.\n- **Documentation:** Consolidates scattered technical knowledge into clear, accessible formats, cutting down research time dramatically.\n- **Automation and workflow optimization:** Frees teams from manual tasks through custom AI-driven automation, such as generating marketing ads or legal support systems, without needing traditional development expertise.\n\nThe successful use of Claude Code hinges on treating it as a collaborative partner that complements human workflows, helping both technical and non-technical staff contribute to building solutions faster and more efficiently.",
            "cost": 0.0009476,
            "total_time": 3.8335771560668945
        },
        {
            "model": "anthropic/claude-sonnet-4-20250514",
            "response": "**Summary: How Anthropic Teams Use Claude Code**\n\nClaude Code is an AI-powered development tool that's transforming how both technical and non-technical staff work across Anthropic. The tool is enabling employees without programming backgrounds\u2014including lawyers, marketers, and designers\u2014to build functional applications and automate workflows.\n\n**Key Use Cases:**\n\n**Codebase Navigation:** New hires and existing employees use Claude Code to quickly understand complex codebases, with the tool explaining data pipeline dependencies and identifying relevant files for specific tasks.\n\n**Testing & Code Review:** Teams automate test writing and code reviews, with some reporting a shift from incomplete, poorly-tested code to reliable, test-driven development practices.\n\n**Debugging:** Production issues that previously took 10-15 minutes to diagnose now resolve 3x faster. Teams feed Claude Code error logs and system information to get step-by-step troubleshooting guidance.\n\n**Prototyping:** Non-technical teams build complete applications\u2014designers create React visualizations, marketers build ad generation systems, and lawyers develop phone tree systems for internal use.\n\n**Documentation:** The tool consolidates scattered technical knowledge into accessible formats, reducing research time by up to 80%.\n\n**Workflow Automation:** Teams create custom automation tools, such as systems that process hundreds of marketing ads and generate variations in minutes rather than hours.\n\n**Business Impact:** The tool is dissolving traditional boundaries between technical and non-technical work, allowing anyone who can describe a problem to build solutions. Most successful implementations treat Claude Code as a collaborative thought partner rather than just a code generator.",
            "cost": 0.00972,
            "total_time": 10.303311824798584
        }
    ]
}