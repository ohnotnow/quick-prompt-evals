{
    "timestamp": "2025-08-02-14-54-23",
    "user_prompt": "Please summarise the following document.  The intendid audience is a manager for a technical group of staff - but they themselves are not deeply technical.  Please don't add any preamble or further chat - the summary is the only thing required.\n\n<document>\n\nHow Anthropic teams use Claude Code\n\nAgentic coding tools like Claude Code help developers accelerate workflows, automate repetitive tasks, and tackle complex programming projects. As the field evolves, we're learning about new applications everyday from users, including our own employees.\n\nTo learn more, we sat down with employees across Anthropic to understand how they use Claude Code at work.\n\nWhile many of their use cases were predictable\u2014debugging, navigating codebases, managing workflows\u2014others surprised us. Lawyers built phone tree systems. Marketers generated hundreds of ad variations in seconds. Data scientists created complex visualizations without knowing JavaScript.\n\nThe pattern became clear: agentic coding isn't just accelerating traditional development. It's dissolving the boundary between technical and non-technical work, turning anyone who can describe a problem into someone who can build a solution.\n\nHere\u2019s what we learned.\n\nCodebase navigation and understanding\n\nTeams across the company use Claude Code to help new hires and even long-time employees get up to speed on our codebases.\n\nNew data scientists on our Infrastructure team feed Claude Code their entire codebase to get productive quickly. Claude reads the codebase\u2019s CLAUDE.md files, identifies relevant ones, explains data pipeline dependencies, and shows which upstream sources feed into dashboards, replacing traditional data catalog tools.\n\nOur Product Engineering team refers to Claude Code as their \"first stop\" for any programming task. They ask it to identify which files to examine for bug fixes, features, or analysis, eliminating the time-consuming process of manually gathering context before building new features.\n\nTesting and code review\n\nAgentic coding tools are particularly popular for their ability to automate two critical but tedious programming tasks: writing unit tests and reviewing code.\n\nThe Product Design team uses Claude Code to write comprehensive tests for new features. They've automated Pull Request comments through GitHub Actions, with Claude handling formatting issues and test case refactoring automatically.\n\nThe Security Engineering team transformed their workflow from \"design doc \u2192 janky code \u2192 refactor \u2192 give up on tests\" to asking Claude for pseudocode, guiding it through test-driven development, and checking in periodically. This results in more reliable, testable code.\n\nAgentic coding can also be used to translate tests into other programming languages. For instance, when the Inference team needs to test functionality in unfamiliar languages like Rust, they explain what they want to test and Claude writes the logic in the native language of the codebase.\n\nDebugging and troubleshooting\n\nProduction issues demand quick resolution, but trying to reason about unfamiliar code under pressure often leads to delays. For many teams at the company, Claude Code accelerates diagnosis and fixes by analyzing stack traces, documentation, and system behavior in real-time.\n\nDuring incidents, the Security Engineering team feeds Claude Code stack traces and documentation to trace control flow through the codebase. Problems that typically take 10-15 minutes of manual scanning now resolve 3x as quickly.\n\nWith Claude Code, the Product Engineering team gained confidence to tackle bugs in unfamiliar codebases. They ask Claude: \"Can you fix this bug? This is the behavior I'm seeing\" and review the proposed solution without needing to rely on other engineering teams for assistance.\n\nIn one instance, when Kubernetes clusters stopped scheduling pods, the Data Infrastructure team used Claude Code to diagnose the issue. They fed it dashboard screenshots, and Claude guided them menu-by-menu through Google Cloud's UI until they found pod IP address exhaustion. Claude then provided the exact commands to create a new IP pool and add it to the cluster, saving them 20 minutes of valuable time during a system outage.\n\nPrototyping and feature development\n\nBuilding new features traditionally requires deep technical knowledge and significant time investment. Claude Code enables rapid prototyping and even full application development, letting teams validate ideas quickly regardless of their programming expertise.\n\nMembers of the Product Design team would feed Figma design files to Claude Code and then set up autonomous loops where Claude Code writes the code for the new feature, runs tests, and iterates continuously. They give Claude abstract problems, let it work autonomously, then review solutions before final refinements. In one case, they had Claude build Vim key bindings for itself with minimal human review.\n\nWith Claude Code, the Product Design team discovered an unexpected use: mapping out error states, logic flows, and system statuses to identify edge cases during design rather than discovering them in development. This fundamentally improves their initial design quality and saves them hours of debugging later on.\n\nDespite not being fluent in TypeScript, data scientists use Claude Code to build entire React applications for visualizing RL model performance. After one-shot prompting in a sandbox environment, the tool writes entire TypeScript visualizations from scratch without understanding the code themselves. Given the simplicity of the task, if the first prompt isn\u2019t sufficient, they\u2019ll make slight tweaks and try again.\n\nDocumentation and knowledge management\n\nTechnical documentation often sits scattered across wikis, code comments, and team members' heads. Claude Code consolidates this knowledge via MCP and CLAUDE.md files into accessible formats, making expertise available to everyone who needs it.\n\nInference team members without ML backgrounds depend on Claude to explain model-specific functions. What normally requires an hour of Google searching now takes 10-20 minutes\u2014an 80% reduction in research time.\n\nThe Security Engineering team has Claude ingest multiple documentation sources to create markdown runbooks and troubleshooting guides. These condensed documents become context for debugging real production issues, which is often more efficient than searching through full knowledge bases.\n\nAutomation and workflow optimization\n\nAgentic coding tools help teams build custom automation that would traditionally require dedicated developer resources or expensive software.\n\nThe Growth Marketing team built an agentic workflow that processes CSV files with hundreds of ads, identifies underperformers, and generates new variations within strict character limits. Using two specialized sub-agents, the system generates hundreds of new ads in minutes instead of hours.\n\nThey also developed a Figma plugin that identifies frames and programmatically generates up to 100 ad variations by swapping headlines and descriptions, reducing hours of copy-pasting to half a second per batch of ads.\n\nIn a particularly unique use case, the Legal team created prototype \"phone tree\" systems to help team members connect with the right lawyer at Anthropic, demonstrating how departments can build custom tools without traditional development resources.\n\nUnlocking new possibilities with Claude Code\n\nThese stories reveal a pattern: Claude Code works best when you focus on the human workflows that it can augment. The most successful teams treat Claude Code as a thought partner rather than a code generator.\n\nThey explore possibilities, prototype rapidly, and share discoveries across technical and non-technical users. This collaborative approach between humans and AI creates opportunities we're only beginning to understand.\n\n</document>\n",
    "system_prompt": null,
    "prompt": "summarise.md",
    "results": [
        {
            "model": "openai/o4-mini",
            "response": "\u2022 Agentic coding tools like Claude Code are democratizing software work, enabling both technical and non-technical staff to build, debug, and automate solutions by simply describing their needs.  \n\u2022 Codebase navigation: new hires and veterans feed entire repositories or data pipelines into Claude to map dependencies, identify relevant files, and get oriented without manual context-gathering.  \n\u2022 Testing & code review: teams automate unit-test generation, Pull Request comments, and refactoring. Security engineers use it for test-driven development and translate tests into unfamiliar languages (e.g., Rust).  \n\u2022 Debugging & troubleshooting: during incidents, Claude ingests stack traces, docs, dashboards or UI screenshots to trace control flow, pinpoint issues (like IP exhaustion in Kubernetes), and suggest fixes, cutting resolution time by up to two-thirds.  \n\u2022 Prototyping & feature development: designers and data scientists feed Figma or abstract specs to Claude, which writes, tests, and iterates on code (including full React/TypeScript apps) with minimal oversight, surfacing edge cases earlier and accelerating MVPs.  \n\u2022 Documentation & knowledge management: Claude consolidates scattered wikis, code comments, and model docs into concise runbooks, troubleshooting guides, or markdown, slashing research time by ~80% for non-experts.  \n\u2022 Automation & workflow optimization: Growth Marketing built agents that process CSVs, flag underperforming ads, and auto-generate hundreds of new variations; the Legal team prototyped an interactive phone-tree system\u2014all without dedicated engineering resources.  \n\u2022 Best practice: treat Claude Code as a collaborative \u201cthought partner,\u201d define human workflows first, then let the tool prototype rapidly. Cross-team sharing of prompts and patterns maximizes impact and uncovers novel use cases.",
            "cost": 0.004334,
            "total_time": 8.146093845367432,
            "prompt": "summarise.md"
        },
        {
            "model": "openai/gpt-4.1-mini",
            "response": "Anthropic teams use Claude Code, an AI-powered coding tool, to speed up development and automate tasks across technical and non-technical roles. Key uses include:\n\n- **Codebase Navigation:** Helps new and existing employees quickly understand complex codebases by summarizing dependencies and relevant files, improving onboarding and productivity.\n- **Testing and Code Review:** Automates writing unit tests and reviewing code, enhancing code quality and efficiency. Teams use it to write tests in unfamiliar languages and drive test-driven development.\n- **Debugging:** Accelerates troubleshooting by analyzing errors and system behavior, enabling faster resolution of production issues even in unfamiliar codebases.\n- **Prototyping and Feature Development:** Allows rapid creation and iteration of new features, enabling non-experts (such as designers and data scientists) to build and test applications without deep coding skills.\n- **Documentation:** Consolidates scattered technical knowledge into accessible formats, reducing research time and improving troubleshooting efficiency.\n- **Automation and Workflow Optimization:** Empowers teams like Marketing and Legal to create custom automated workflows and tools without heavy developer involvement, saving significant time.\n\nOverall, Claude Code is most effective when used as a collaborative partner to augment human workflows, breaking down barriers between technical and non-technical staff and driving innovation across teams.",
            "cost": 0.0005748,
            "total_time": 2.35506010055542,
            "prompt": "summarise.md"
        },
        {
            "model": "anthropic/claude-sonnet-4-20250514",
            "response": "Anthropic employees across technical and non-technical teams are using Claude Code (an AI coding tool) to accelerate work beyond traditional software development. Key applications include:\n\n**Developer Productivity:**\n- New hires use it to quickly understand complex codebases by analyzing documentation and explaining system dependencies\n- Teams automate code testing and review processes, with some reducing debugging time by 3x (from 10-15 minutes to 3-5 minutes)\n- Engineers gain confidence fixing bugs in unfamiliar code without relying on other teams\n\n**Cross-Functional Applications:**\n- Marketing teams generate hundreds of ad variations in minutes and built custom Figma plugins for automated content creation\n- Data scientists without JavaScript knowledge create React applications for data visualization\n- Legal team prototyped phone tree systems to route internal inquiries\n- Product designers map error states and system flows during design phase, improving quality and reducing later debugging\n\n**Operational Benefits:**\n- Infrastructure teams use it for rapid incident response, with one case saving 20 minutes during a system outage\n- Documentation consolidation reduces research time by 80% (from 1 hour to 10-20 minutes)\n- Eliminates need for dedicated developer resources for custom automation tools\n\n**Key Pattern:** The tool is dissolving boundaries between technical and non-technical work, enabling anyone who can describe a problem to build solutions. Most successful adoption treats Claude Code as a collaborative thought partner rather than just a code generator.",
            "cost": 0.009285,
            "total_time": 8.965067148208618,
            "prompt": "summarise.md"
        }
    ]
}